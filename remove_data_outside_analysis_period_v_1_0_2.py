#!/usr/bin/env python
# coding: utf-8

# <img src="GEOS_logo.pdf" width="500" />

# 
# # Step **5** of **`G2FNL`**: <font color=blue>"remove_data_outside_analysis_period.ipynb"</font>
# #### Oct 2, 2021  <font color=red>(v. 1.0.2)</font> 
# ##### Jeonghyeop Kim (jeonghyeop.kim@gmail.com)
# 
# > input file(s): **`time_vector.dat`** & **`newDate_i`** \
# > output file(s): **`timeCropped_i`** 
# 
# 0. This code is a part of GPS2FNL process
# 1. This code loads **`newDate_i`** and crops the GPS position data for the time of our interest
# 2. And then saved the cropped data (temporally) into **`timeCropped_i`** files
# 3. Information of the time of our interest is in **`time_vector.dat`** file, which is generated by STEP 4.

# <div class="alert alert-danger">
# Do NOT run this code twice without re-starting the kernel
# </div>

# In[1]:


import numpy as np
from datetime import datetime
import pandas as pd
import os
#pd.__version__


# In[2]:


current_dir=os.getcwd()
os.getcwd()


# In[3]:


filename = 'station_list_full.dat'
coordi = pd.read_csv(filename,sep=' ',header=None)
coordi.columns = ['STID']
N=len(coordi)


# In[4]:


# READ 'time_vector.dat' and obtain the information of the time of your interest
filename = 'time_vector.dat'
time = pd.read_csv(filename,sep=' ',header=None)
time.columns = ['time']
time_ini = time.loc[0,['time']] #earliest time
time_fi = time.iloc[-1,0] #latest time
print("SAVE daily GNSS position estimates for the time period between %i and %i." % (time_ini, time_fi))


# In[5]:


time_ini_int = int(time_ini)
time_fi_int = int(time_fi)


# In[6]:


processing_dir = os.path.join(current_dir, 'data', 'processing')
os.chdir(processing_dir) # cp to processing directory
os.getcwd()


# In[7]:


for i in range(0,N): # i in range(0,how many files?)

    inputfile = "newDate_"+str(i+1) #input_file = newDdate_i
    df_input=pd.read_csv(inputfile,sep=' ',header=None)  
    df_input.columns = ['time','lon','lat','ue','un','uz','se','sn','sz','corr_en','flag'] #columns
    
    df_interest=df_input.loc[(df_input['time'] >= time_ini_int) & (df_input['time'] <= time_fi_int)]
    df_interest=df_interest.reset_index(drop=True)
    outputfile = "timeCropped_"+str(i+1) #output file = timeCropped_"$i"
#    df_interest.to_csv(outputfile ,header=None, index=None,sep=' ',float_format='%g') #SAVE AS THEY ARE
    df_interest.to_csv(outputfile ,header=None, index=None,sep=' ',float_format='%.6f')    


# In[ ]:




